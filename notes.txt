Given the sheer number of possibilites, sensors, integrations,  theres unlimited possibilities.
Current:
i2c LCD, listening to computer audio, (I dont have any i2c ADCs to run a microphone, so computer audio is fine.)
pip install pyaudio
fails.
sudo apt install portaudio19-dev
then
pip install pyaudio

Success!

################
sudo apt install python3-dev

############ OK I Think i get it now! ###########
the reffernce image here, https://blog.danman.eu/emulating-hdmi-connection/
they reason this guy uses an eeprom is to enumerate the i2c device, which garners the plug detection (hot plug functionality )
the EDID, on the i2c bus, is a memory device at address 0x50, which the kernel has a driver predefined to listen on, and 
await responses which define the device plugged in. its weird right. the hot plug function is based on polling a non hot plug tech.
SO IF I get an i2c memory device, and assign it address 0x50, I should be able to make my own hotplugable HDMI devices without 
having to do a kernel module hack, or write a bunch of weird scripts to handle how the bus gets enumerated. 

ok, and get-edid is a superiour tool for ID of bus devices with i2c memory IDs


################################### DERPS BELOW ##########################################


ok, been hitting this for a minute. got some issues. The constants are the device addresses, but on any given system, 
the bus could differ, which means we're editing code every time we want to run a program on a different computer.
That is a pain in the butt.

I tried writing a class library to take addresses, and return busses, but this isnt working properly yet. 
Auto enumeration is the goal, or something close to that. 


it could be my own ignorance, but the enumeration of i2c devices is not automatic on linux systems, its more like
a device responds to a probe if present. There are differnt means of probing, and various devices respond in different ways.
need to look more at the quick-write functions which are for some devices, and other functional methods.

################ I2C IS NOT HOT PLUG TECHNOLOGY BUT HDMI IS ##################
tried using HPD as a detectio method, but I think its more complex than HOD being high or low.
maybe a kernel driver mod could report that. As is, you get the status of the connection for an enumerated 
device. since my device is non enumerable, it says disconnected. maybe its not too complex to make an enumerable device?
Then i could use HDMI hot plug events to detect the controlers with i2c devices....
###############################################################################

Ok so that is important, as it means we dont know when or where an i2c technology will attach to a system.
it will respond to poling, (probably)  where, and when is a mystery. I2C is not event driven, there is no protocol 
level or electrical level detection, and no IRQs.

So the goal is to make it less of a mystery. 

What I might do is write a script that logs the system default, no attached devices.
 so then what? when we're looking for devices on busses, maybe look at the log first?
The full scan operation lenghth can vary alot. its like 77 addresses on N-buses.

So... ah.. lets see, I think the HDMI I2C bus (though variant from computer to computer) is constant for any specific computers
hardware. So HDMI is hot plugable, which means the device on video could be used to detect a device.

Additionaly, we could do:

$ ls /sys/class/drm/card0-HDMI-A-*

which will give you bus assignments to the HDMI port.
this might vary, on systems with graphics cards, or multiple HDMI ports.
still it would tell you a more probable list of devices to search, rather than scanning all the i2c devices.
might be able to make a more intelligent script too, once I see what a system breaking that logic would do.
Else:
$ ls /sys/class/drm/card0-HDMI-A-* | grep i2c-
i2c-1
i2c-2
i2c-4

for example. my laptop has busses 6,7 as the HDMI i2c busses. its sorta weird, that I have 2 or 3 hdmi devices listed on a system with 1 HDMI
port. maybe its a CPU support thing. IDK.

## It happend: the i2c bus numbers changed when I installed the NVidea kernel drivers.
   still, its only 2 ports. so maybe on a system with a stable kernel/ setup, the busses dont change?
############# On this idea of using HDMI hotplug detection and kernel drivers: ########################################
Getting into this ugly gray area, of hardware detection, but what Im tring to do now is use CPU and GPU detection to read registers related to HPD.

sudo apt install intel-gpu-tools

system specific: x86_64 integrated intel graphics only: HPB status on register 0x6111C

bleh, all this is ugly
